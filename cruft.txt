//        temp = trie_new(be);
//        trie_insert(be, temp, HASH8(be, "foo"), be->nil, _val(be, 0x01234567));
//        trie_insert(be, temp, HASH8(be, "bar"), be->nil, _val(be, 0x89abcdef));
//        trie_insert(be, temp, HASH8(be, "baz"), be->nil, _val(be, 0x00112233));

//        trie_insert(be, temp, be->nil, C2B("aoo"), _val(be, 0x12345678));
//        trie_insert(be, temp, be->nil, C2B("boo"), _val(be, 0x23456789));
//        trie_insert(be, temp, be->nil, C2B("coo"), _val(be, 0x3456789a));
//        trie_insert(be, temp, be->nil, C2B("doo"), _val(be, 0x456789ab));
//        trie_insert(be, temp, be->nil, C2B("eoo"), _val(be, 0x56789abc));
//        trie_insert(be, temp, be->nil, C2B("foo"), _val(be, 0x6789abcd));

//        trie_insert(be, temp, be->nil, C2B("bar"), _val(be, 0x89abcdef));
//        trie_insert(be, temp, be->nil, C2B("bap"), _val(be, 0x00112233));

//_d(c[0]);
//_d(c[1]);

//    c[0] = '0';
//    c[1] = '0';
//    c[2] = '0';
//    c[3] = '\0';
//    mword *temph;
//
//    for(i=0; i<10; i++){
//        for(j=0; j<10; j++){
//            for(k=0; k<10; k++){
////                trie_insert(be, 
////                        temp,
////                        be->nil,
////                        string_c2b(be, c, 3), 
////                        _val(be, (i*100 + j*10 + k)));
//                trie_insert(be, 
//                        temp,
//                        pearson_hash8(be, be->zero_hash, (char*)string_c2b(be, c, 3), 3), 
//                        be->nil,
//                        _val(be, (i*100 + j*10 + k)));
//                c[0]++;
//            }
//            c[0] = '0';
//            c[1]++;
//        }
//        c[0] = '0';
//        c[1] = '0';
//        c[2]++;
//    }
//    ACC  = aop_from_trie(be, temp);
//    temp = aop_to_sap(be, ACC, UNSIGNED_ST);
//    sap_update(be, temp, HASH8(be, "000"), _val(be, 0xdeadbeef), PROBE_S, UNSIGNED_ST);

//_mem( HASH8(be, "00") );



//                ACC = HASHC(be, "/babel/tag/trie");
//                ACC = HASHC(be, "foo");

                //---------------- 0000000000000010
                //0000000000000000 cdeed55d2583ab94
                //0000000000000008 a385809743a25530

//#define HASH8(be,str) (pearson_hash8(be, be->zero_hash, (char*)string_c2b(be, str, STRLEN(str)), STRLEN(str)))
//#define trie_exists(pyr, trie, key, secondary_key) (!is_nil(trie_lookup_hash(pyr, trie, key, secondary_key))) // trie_exists#

//                temp = trie_new(be);
//                trie_insert(be, temp, HASH8(be, "foo"), be->nil, _val(be, 0x01234567));
//                trie_insert(be, temp, HASH8(be, "bar"), be->nil, _val(be, 0x89abcdef));
//                trie_insert(be, temp, HASH8(be, "baz"), be->nil, _val(be, 0x00112233));
//                ACC = temp;

//                ACC = _val(be, trie_exists(be, temp, HASH8(be, "fop"), be->nil));
//                ACC = trie_lookup_hash(be, temp, be->nil, C2B("foo"));

//                cmd_code_str = strtok(NULL, " ");
//                if(cmd_code_str == NULL){ _say("Not enough arguments"); continue; }
//
//                ACC = _val(be, trie_exists(be, temp, pearson_hash8(be,be->zero_hash,cmd_code_str,strlen(cmd_code_str)), be->nil));

//                trie_remove(be, temp, pearson_hash8(be,be->zero_hash,"foo",STRLEN("foo")), be->nil);
//                ACC = temp;

//                ACC = trie_entries(be, temp);
//                ACC = list_to_ptr_array(be, trie_entries(be, temp)); // array-of-pairs form

//                ACC  = aop_from_trie(be, temp);
//                temp = aop_to_trie_keys(be, ACC);
//                temp = aop_to_array(be, ACC);
//                ACC  = aop_from_array(be, pcar(temp), pcdr(temp));

//                temp = aop_to_list(be, ACC);
//                ACC = aop_from_list(be, pcar(temp), pcdr(temp));
//                temp = aop_to_sap(be, ACC, ALPHA_BYTE_ST);
//                ACC = aop_from_list(be, pcar(temp), pcdr(temp));

//                ACC = temp;

//                _d(be->thread_id);

//                for(i=0; i<10; i++){
//                             tc = be->threads[i];
//                    paging_base = tc->mem->paging_base;
//                    level1_page = rdp(paging_base, 0);
//                    level0_page = rdp(level1_page, 0);
//                    alloc_ptr   = level0_page + tc->mem->alloc_ptr.level0_index;
//_d( i );
//_d( *paging_base );
//_d( *level1_page );
//_d( *level0_page );
//_d( *alloc_ptr );
//                }

//                _dd(tc->mem->alloc_ptr.level2_index);
//                _dd(tc->mem->alloc_ptr.level1_index);
//                _dd(tc->mem->alloc_ptr.level0_index);

//                ACC = list_cons(be, C2B("coo"), be->nil);
//                _dump(ACC);

//                ACC  = aop_from_trie_keys(be, temp);
//                ACC  = aop_from_trie(be, temp);
//                temp = aop_to_sap(be, ACC, LEX_MWORD_ST);
//                ACC = temp;

//                tempv = sap_find_index_linear(be, temp, 0, size(temp), list_cons(be, C2B("coo"), be->nil), LEX_MWORD_ST);
//                tempv = sap_find_index_linear(be, temp, 0, size(temp), list_cons(be, HASH8(be, "000"), be->nil), LEX_MWORD_ST);
//                _dd(tempv);
//                tempv = sap_find_index_binary(be, temp, list_cons(be, HASH8(be, "000"), be->nil), LEX_MWORD_ST);
//                _dd(tempv);
//                tempv = sap_find_index_probe(be, temp,list_cons(be, HASH8(be, "000"), be->nil));
//                _dd(tempv);
//                ACC = pcdr(rdp(temp,tempv));
//                ACC = (mword*)tempv;

//                tempv = sap_find_index_binary(be, temp, list_cons(be, HASH8(be, "000"), be->nil), LEX_MWORD_ST);


//                _mem(be->nil);
//                _mem(be->zero_hash);

//                temp = HASH8(be, "000");
//                _mem(temp);

//                cmd_code_str = strtok(NULL, " ");
//                if(cmd_code_str == NULL){ _say("Not enough arguments"); continue; }

//                tempv = sap_find_index_linear(be, temp, 0, size(temp), pearson_hash8(be, be->zero_hash, cmd_code_str, strlen(cmd_code_str)), LEX_MWORD_ST);
//                tempv = sap_find_index_binary(be, temp, pearson_hash8(be, be->zero_hash, cmd_code_str, strlen(cmd_code_str)), UNSIGNED_ST);
//                tempv = sap_find_index_probe(be, temp, pearson_hash8(be,be->zero_hash,cmd_code_str,strlen(cmd_code_str)));

//                ACC = sap_lookup(be, temp, pearson_hash8(be, be->zero_hash, cmd_code_str, strlen(cmd_code_str)), PROBE_S, UNSIGNED_ST);
//                _dd(tempv);



//    // calculate headroom in alloc_pg from alloc_ptr
//    mword level0_remaining = LEVEL0_PAGE_SIZE - tc->mem->alloc_ptr.level0_index;
//
//    // XXX Note: previous iterations of Babel used high-to-low allocation;
//    //      lib_babel uses low-to-high allocation
//
//    if(alloc_request_size > level0_remaining){
//        _enhance("alloc_request_size > level0_remaining");
//        // mem_context_expand() (returns new alloc_ptr)
//        // alloc_ptr = mem_context_expand(tc);
//    }
//
//    result = alloc_ptr;
//    tc->mem->alloc_ptr.level0_index += alloc_request_size;


//// non-reentrant due to statics
//// XXX measure: better perf?
//void access_pa_rd(babel_env *be, bstruct b, mword offset, cptr result, access_size asize){
//
//    static mword last_level2_offset; // primitive TLB
//    static mword last_level1_offset;
//
//    mword level2_offset = BIT_SELECT(offset, PA_LEVEL2_MSB, PA_LEVEL2_LSB);
//    mword level1_offset = BIT_SELECT(offset, PA_LEVEL1_MSB, PA_LEVEL1_LSB);
//    mword level0_offset = BIT_SELECT(offset, PA_LEVEL0_MSB, PA_LEVEL0_LSB);
//
//           mword *result2;
//    static mword *result1;
//
//    if(    (level2_offset != last_level2_offset) 
//        || (level1_offset != last_level1_offset) ){
//        result2 = rdp(be->mem->paging_base, level2_offset);
//        result1 = rdp(result2, level1_offset);
//    }
//
//    access_api_rd(be, result1, level0_offset, result, asize); // XXX this can live-lock!
//
//}

#if 0
// init_mem_size is in units of bytes
//
mem_context *mem_context_new(babel_env *be, mword init_mem_size){

    int i;

    mem_context *mc = malloc(sizeof(mem_context)); // XXX WAIVER(malloc) XXX

    if(!init_mem_size) // Returns an uninitialized mem_context
        return mc;

    ptr level2_page;
    ptr level1_page;
    val level0_page;

    mword mword_mem_size = UNITS_8TOM(init_mem_size);

    if(mword_mem_size < LARGE_PAGE_SIZE){

        level2_page = mem_sys_new_bstruct(VAL_TO_PTR(UNITS_MTO8(PA_DIR_SIZE)));
        level1_page = mem_sys_new_bstruct(VAL_TO_PTR(UNITS_MTO8(PA_DIR_SIZE)));
        level0_page = mem_sys_new_bstruct(UNITS_MTO8(mword_mem_size));

        for(i=0;i<PA_DIR_SIZE;i++){ // manual initializion of ptr-arrays
            ldp(level1_page,i) = be->nil;
            ldp(level2_page,i) = be->nil;
        }

        memset((char*)level0_page, 0, init_mem_size); // zero out memory

        ldp(level1_page,0) = level0_page;
        ldp(level2_page,0) = level1_page;
        mc->paging_base    = level2_page;

    }
    else{
        _enhance("init_mem_size >= LARGE_PAGE_SIZE");
    }

    mc->sys_alloc_count=0;
    mc->sys_free_count=0;

    // TODO: init GC flags
    // TODO: init nested context list

    return mc;

}
#endif


//                temp = _mkptr(be, 5, // 0xf0f0f0f0f0f0f0f0, 0x0f0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, 0x0f0f0f0f0f0f0f0f
//                    _mkval(be, 2, 0x0121312141213121, 0x1512131214121312),
//                    _mkval(be, 2, 0x2161213121412131, 0x3215121312141213),
//                    _mkval(be, 2, 0x4121712131214121, 0x5312151213121412),
//                    _mkval(be, 2, 0x6131216121312141, 0x7213121512131214),
//                    _mkval(be, 2, 0x8121312181213121, 0x9412131215121312));

//                ACC = _mkval(be, 10,
//                    0x0121312141213121, 0x1512131214121312,
//                    0x2161213121412131, 0x3215121312141213,
//                    0x4121712131214121, 0x5312151213121412,
//                    0x6131216121312141, 0x7213121512131214,
//                    0x8121312181213121, 0x9412131215121312);

//_dq(temp);
//                ACC = bstruct_cp(be, temp);

//                ACC = temp;
//                ACC = bstruct_unload(be, temp);
//                ACC = (mword*)string_to_array(be, C2B("[val 1 2 3]\n"));

//                ACC = _mkaop(be, 5,
//                    _val(be, 0x0121312141213121), _val(be, 0x1512131214121312),
//                    _val(be, 0x2161213121412131), _val(be, 0x3215121312141213),
//                    _val(be, 0x4121712131214121), _val(be, 0x5312151213121412),
//                    _val(be, 0x6131216121312141), _val(be, 0x7213121512131214),
//                    _val(be, 0x8121312181213121), _val(be, 0x9412131215121312));

//                ACC = pearson_hash8(be, be->zero_hash, "foobarbananabox", STRLEN("foobarbananabox"));
//                *c++;


/// vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv ///
/// OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD vvv OLD ///

// NEXT: Test std_*_pbp using tree.bbl; integrate with relative-offset
// operators
//
//                temp = pcdr(ACC);
//                ACC = pcar(ACC);
//
//                ACC = std_read_with_pbp(this_pyr, ACC, temp);

//                A = _mkls(this_pyr, 3, 
//                            _val(this_pyr, 1), 
//                            _val(this_pyr, 2), 
//                            _val(this_pyr, 3));
//
//                B = _mkls(this_pyr, 3, 
//                            _val(this_pyr, 4),
//                            _val(this_pyr, 5), 
//                            _val(this_pyr, 6));
//
//                temp = _cons(this_pyr, A, B);
//
//                ACC = list_append_pyr_op(this_pyr, temp);

//                temp = _mkptr(this_pyr, 3, 
//                        _val(this_pyr,0x11111111),
//                        _val(this_pyr,0x22222222),
//                        _val(this_pyr,0x33333333));
//
//                ACC = _mkptr(this_pyr, 3, 
//                        _val(this_pyr,0x44444444),
//                        _val(this_pyr,0x55555555),
//                        _val(this_pyr,0x66666666));
//
//                ACC = (mword*)array_cat_pyr_op(this_pyr, (blob)_cons(this_pyr, temp,ACC));

//                ACC = _mkval(this_pyr, 20,
//                        64, 87, 27, 64, 89, 98, 28,  9,  0, 73, 
//                        89, 76, 74, 82, 14, 16, 77, 83, 71, 63);
//                temp = _bs2str(this_pyr, ACC);
//                _say((char*)temp);
//
////                sort(this_pyr, ACC, UNSIGNED);
//
//                sort_insertion(this_pyr, ACC, (mword*)(ACC+size(ACC)), SORT_ARRAY_TYPE_VAL, UNSIGNED, 0);
//                temp = _bs2str(this_pyr, ACC);
//                _say((char*)temp);
//
//                tempv = array_search(this_pyr, ACC, _val(this_pyr, 64), UNSIGNED);
//_dd(tempv);

//                ACC = _val(this_pyr, _mu(this_pyr, global_irt->xbar));

//                ACC = global_irt->srand;

//                ACC = std_genrand32(this_pyr, 13);

//                ACC = tptr_uniq(this_pyr, nil);

//                temp = pearson_hash8(this_pyr, C2B("/foo"));
//
//                ACC = pearson_hash8p(this_pyr, (char*)temp, C2B("/foo"));

//                ACC = io_slurp(this_pyr, "pvc_code.bbl");
//                ACC = bstruct_load(this_pyr, ACC, size(ACC));
//                _say("pvc_code.bbl loaded");
//
//                ACC = (blob)eval_apply(this_pyr, ACC);
//                _say("done");

//                ACC = C2B("");

//                ACC = global_irt->srand;

                // TODO:
                // 1. sexpr-to-aexpr format (with tags)
                // 2. command-line execution of opcodes (translate to hash
                //      look up in op-table, etc.) Allow accumulator to be used
                //      to implement nesting.

//                ACC = bstruct_cp(this_pyr, global_irt->xbar);
//                sort(this_pyr, ACC, UNSIGNED);
//
//                for(i=1;i<size(ACC);i++){
//                    tempv = ldv(ldp((mword*)ACC[i],0),3);
////                    tempw = abs(i-(tempv/xbar_avg));
//                    tempw = i-(tempv/xbar_avg);
//                    _dd(tempw);
//                }

//                tempv = ldv(ldp((mword*)ACC[1],           0),3);
//                tempw = ldv(ldp((mword*)ACC[size(ACC)-1], 0),3);
//
//                _d(tempv);
//                _d(tempw);
//                _d(tempw-tempv);
//                _dd(size(ACC));

//        ldv(dest,0) = MWORD_MUX(    
//                        BIT_MASK(rdv(src,0),(src_begin+size_arg-1),src_begin),
//                        rdv(dest,0), 
//                        BIT_RANGE((dest_begin+size_arg-1),dest_begin));

//                tempv = (BIT_MASK(0xdeadbeef,27,16));
//                tempw = (BIT_RANGE(19,8));
//
//                _d(tempv);
//                _d(tempw);

//                temp = _mkval(this_pyr, 3, 0xdeadbeef, 0xfacefeed, 0xabaddeed);
//                ACC  = _mkval(this_pyr, 3, 0xcccccccc, 0xaaaaaaaa, 0);
//                array1_move(this_pyr, ACC, 4, temp, 28, 40);

//                temp = _mkval(this_pyr, 5, 0x88888888, 0x99999999, 0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc);
//                ACC  = _mkval(this_pyr, 5, 0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555);
//                array1_move(this_pyr, ACC, 4, temp, 28, 64);

                // 00000000 00000000 00000000 00000000
                // ff000000 ffffffff 00ffffff 00000000

//                temp = _mkval(this_pyr, 8, 0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888);
//                ACC  = _mkval(this_pyr, 8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000);
//global_dev_ptr = ACC;
//                array1_move(this_pyr, ACC, 48, temp, 60, 12);

//                for(i=4; i<64; i+=4){
//
//                    tempv = (1 + (genrand_int32() % 32)) * 4;
//
//                    temp = _mkval(this_pyr, 8, 0x11111111, 0x22222222, 0x33333333, 0x44444444, 0x55555555, 0x66666666, 0x77777777, 0x88888888);
//                    ACC  = _mkval(this_pyr, 8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000);
//                    array1_move(this_pyr, ACC, 64, temp, 4, tempv);
//
//                    _dd(i);
//                    _dd(2*i);
//                    _dd(tempv);
//
//                    temp = _bs2str(this_pyr, ACC);
//                    _say((char*)temp);
//                    _say("");
//
//                }

//                ACC = bstruct_cp(this_pyr, global_irt->xbar);
//                sort(this_pyr, ACC, UNSIGNED);

//                ACC = io_slurp(this_pyr, "pvc_code.bbl");
//                ACC = bstruct_load(this_pyr, ACC, size(ACC));
//                _say("pvc_code.bbl loaded");
//
//                ACC = (blob)eval_apply(this_pyr, ACC);
//                _say("done");

//                _say("^-^ hi...");

//                ACC = C2B("banana brains");
//                compress_mtf_encode(this_pyr, ACC);

//                ACC = _mkval(this_pyr, 5, 0x16e6262, 0x3230101, 0x56b0372, 0x73, 0xffffff00);
//                compress_mtf_decode(this_pyr, ACC);

//                ACC = C2B("In the beginning, God created the heavens and the earth.");
//                compress_mtf_encode(this_pyr, ACC);
//                compress_mtf_decode(this_pyr, ACC);
//
//_say((char*)ACC);




//                ACC = io_slurp8(this_pyr, "getty.txt");

//                ACC = C2B("invention contention");
//                ACC = C2B("contention invention nation rotation caution");
//                ACC = C2B("noituac noitator noitan noitnevni noitnetnoc");

//                ACC = C2B("repetition");
//                temp = compress_bwt_encode_block(this_pyr, (char*)ACC, array8_size(this_pyr, ACC));
//ACC = compress_bwt_decode_block(this_pyr, (char*)temp, array8_size(this_pyr, temp));
//_say((char*)ACC);
//_die;

                //compress_mtf_encode(this_pyr, temp);
//_say((char*)temp);

//ACC = (mword*)compress_rle_encode(this_pyr, temp);

//compress_mtf_encode(this_pyr, temp);
//compress_mtf_decode(this_pyr, ACC);
//temp = _bs2str(this_pyr, ACC);
//_say((char*)temp);
//_die;
//ACC = compress_range_encoder(this_pyr, temp);

//ACC = _bs2str(this_pyr, temp);

    //_say((char*)temp);

//temp = compress_rle_decode(this_pyr, ACC);
//ACC = temp;

//_d(temp);
//ACC = temp;
//compress_mtf_decode(this_pyr, temp);

//                ACC = _mkval(this_pyr, 5, 0x16e6262, 0x3230101, 0x56b0372, 0x73, 0x00);
//                ACC = array_shrink(this_pyr, ACC, 0, 14, BYTE_ASIZE);

//                ACC = io_slurp8(this_pyr, "getty.txt");


//i = memcmp( "\x070\x070", "\x080\x080", 2 );
//_d(i);
//_die;

//                ACC = _mkval(this_pyr, 65,
//                    0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,
//                    0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f,
//                    0x20212223, 0x24252627, 0x28292a2b, 0x2c2d2e2f,
//                    0x30313233, 0x34353637, 0x38393a3b, 0x3c3d3e3f,
//                    0x40414243, 0x44454647, 0x48494a4b, 0x4c4d4e4f,
//                    0x50515253, 0x54555657, 0x58595a5b, 0x5c5d5e5f,
//                    0x60616263, 0x64656667, 0x68696a6b, 0x6c6d6e6f,
//                    0x70717273, 0x74757677, 0x78797a7b, 0x7c7d7e80,
//                    0x80818283, 0x84858687, 0x88898a8b, 0x8c8d8e8f,
//                    0x90919293, 0x94959697, 0x98999a9b, 0x9c9d9e9f,
//                    0xa0a1a2a3, 0xa4a5a6a7, 0xa8a9aaab, 0xacadaeaf,
//                    0xb0b1b2b3, 0xb4b5b6b7, 0xb8b9babb, 0xbcbdbebf,
//                    0xc0c1c2c3, 0xc4c5c6c7, 0xc8c9cacb, 0xcccdcecf,
//                    0xd0d1d2d3, 0xd4d5d6d7, 0xd8d9dadb, 0xdcdddedf,
//                    0xe0e1e2e3, 0xe4e5e6e7, 0xe8e9eaeb, 0xecedeeef,
//                    0xf0f1f2f3, 0xf4f5f6f7, 0xf8f9fafb, 0xfcfdfeff, 0);
//
////                ldv(ACC,3)=0;
//
//temp = _bs2str(this_pyr, ACC);
//_say((char*)temp);
//assert(0);
//ACC = temp;
//ACC = compress_bwt_decode_block(this_pyr, (unsigned char*)temp, array8_size(this_pyr, temp));
//ACC = temp;
//_say((char*)ACC);
//                temp = compress_rle_encode(this_pyr, temp);

//ACC = temp;
//_say((char*)ACC);
//                ACC = compress_bwt_decode_block(this_pyr, (unsigned char*)temp, array8_size(this_pyr, temp));
//_say((char*)ACC);

//                // TODO: Get range-decoder working; add parameter for range-decoder distribution XXX //
//                ACC = io_slurp8(this_pyr, "doi.txt");
//                temp = compress_bwt_encode_block(this_pyr, (unsigned char*)ACC, array8_size(this_pyr, ACC));
//                compress_mtf_encode(this_pyr, temp);
//                ACC = compress_range_encoder(this_pyr, temp);

//                ACC = _mkval(this_pyr, 2, 0xf8f9fafb, 0xfcfdfeff);

//                ACC = math_add(this_pyr, _val(this_pyr, 0xffffffff), _val(this_pyr, 0x1));
//                ACC = math_add(this_pyr, 
//                        _mkval(this_pyr, 2, 0x55555555, 0xffffffff), 
//                        _mkval(this_pyr, 2, 0xaaaaaaaa, 0x1));
////                        _val(this_pyr, 0x1));
 
//                ACC = _mkval(this_pyr, 2, 0xf8f9fafb, 0xfcfdfeff);
//                ACC = _mkval(this_pyr, 2, 0x7060504, 0x3020100);
//                ACC = math_add(this_pyr, ACC, _val(this_pyr, 1));
//                ACC = math_neg(this_pyr, ACC);

//                ACC = math_sub(this_pyr, 
//                        _mkval(this_pyr, 2, 0xffffffff, 3),
//                        _mkval(this_pyr, 2, 0xffffffff, 12));


//temp = std_genrand32(this_pyr, 16384);
////////ACC = _bs2str(this_pyr, temp);
////////_say((char*)ACC);
//////
//temp2 = std_genrand32(this_pyr, 16384);
////////ACC = _bs2str(this_pyr, temp2);
////////_say((char*)ACC);
////
//tempv = std_time_ms();
////
//////for(i=0;i<1000;i++){
//    ACC = math_lattice_mul(this_pyr,
//        temp,
//        temp2);
//////}
////
//////                ACC = math_mul(this_pyr,
//////                        mem_new_val(this_pyr, 4, 0xff),
//////                        mem_new_val(this_pyr, 4, 0xff));
//////
//tempw = std_time_ms();
//_dd(tempw-tempv);


// ^^^^^^^^^^^^^^^^^^^^^^NEW^^^^^^^^^^^^^^^^^^^^^^^
// ^^^^^^^^^^^^^^^^^^^^^^NEW^^^^^^^^^^^^^^^^^^^^^^^
// ^^^^^^^^^^^^^^^^^^^^^^NEW^^^^^^^^^^^^^^^^^^^^^^^
// ^^^^^^^^^^^^^^^^^^^^^^NEW^^^^^^^^^^^^^^^^^^^^^^^


//                util_strtok_dec(cmd_code_str, cmd_code);
//                util_strtok_dec(cmd_code_str, cmd_code2);
//
//                       ACC = _mkval(this_pyr, 4, 0xf0f0f0f0, 0x0f0f0f0f, 0xf0f0f0f0, 0x0f0f0f0f);
//                mword *src = _mkval(this_pyr, 4, 0x77777777, 0x99999999, 0xbbbbbbbb, 0xdddddddd);
//
//                array1_move(this_pyr, 
//                        ACC,
//                        cmd_code, 
//                        src,
//                        cmd_code2);


//                temp = _mkls(this_pyr, 3, _val(this_pyr, 0xdeadbabe), _val(this_pyr, 0xbeefface), _val(this_pyr, 0xabadcafe));
//                ACC = bstruct_cp(this_pyr, temp);

//                ACC = sexpr_from_string(this_pyr, C2B("[val 1 2 3]\n"));

//                ACC = _mk_aop(this_pyr, 2,
//                        _val(this_pyr, 0xdeadbabe),
//                        _val(this_pyr, 0xbeefface),
//                        _val(this_pyr, 0xcafefade),
//                        _val(this_pyr, 0xabaddeed));

//                ACC = global_irt->tags->PYR_TAG_TRIE_ENTRY;
//                ACC = global_irt->tags->PYR_TAG_TRIE;

//                ACC = global_irt->fs;
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "foo"), nil, _val(this_pyr, 0x01234567));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "bar"), nil, _val(this_pyr, 0x89abcdef));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "baz"), nil, _val(this_pyr, 0x00112233));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "aaa"), nil, _val(this_pyr, 0x44556677));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "aab"), nil, _val(this_pyr, 0x8899aabb));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "aac"), nil, _val(this_pyr, 0xccddeeff));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "aad"), nil, _val(this_pyr, 0x01012323));
//                trie_insert(this_pyr, global_irt->fs, HASH8(this_pyr, "aae"), nil, _val(this_pyr, 0x45456767));

//                map_insert(global_irt->fs, "foo", _val(this_pyr, 0x01234567));
//                map_insert(global_irt->fs, "bar", _val(this_pyr, 0x89abcdef));
//                map_insert(global_irt->fs, "baz", _val(this_pyr, 0x00112233));
//                map_insert(global_irt->fs, "aaa", _val(this_pyr, 0x44556677));
//                map_insert(global_irt->fs, "aab", _val(this_pyr, 0x8899aabb));
//                map_insert(global_irt->fs, "aac", _val(this_pyr, 0xccddeeff));
//                map_insert(global_irt->fs, "aad", _val(this_pyr, 0x01012323));
//                map_insert(global_irt->fs, "aae", _val(this_pyr, 0x45456767));

//                trie_remove(this_pyr, global_irt->fs, HASH8(this_pyr, "aac"), nil);

//                trie_remove(this_pyr, global_irt->fs, HASH8(this_pyr, "aad"), nil);

//                trie_remove(this_pyr, global_irt->fs, HASH8(this_pyr, "foo"), nil);
//                trie_remove(this_pyr, global_irt->fs, nil,                    string_c2b(this_pyr, "foo", 100));
//                ACC = _val(this_pyr, 
//                        trie_exists(this_pyr, global_irt->fs, HASH8(this_pyr, "bap"), nil));

//#define trie_exists(pyr, trie, key, secondary_key) (!is_nil(trie_lookup_hash(pyr, trie, key, secondary_key))) // trie_exists#

//   result0 = _load(this_bvm, oi0.data, size(oi0.data)); 

//                temp = io_slurp8(this_pyr, "aop.bbl");
//                temp = bstruct_load(this_pyr, temp, size(temp));
//
//                array_sort(this_pyr, temp, LEX_BYTE);

//                ACC = temp;
//
//                ACC = _val(this_pyr,
//                        array_search(this_pyr, temp, C2B("iguana"), LEX_BYTE));

//mword array_search(pyr_cache *this_pyr, mword *array, mword *target, sort_type st){ // array_search#

//                array_build_max_heap(ACC);

//                temp  = _mkval(this_pyr, 4, 3, 1, 0, 0);
//                temp2 = _mkval(this_pyr, 7, 2, 1, 0, 0, 0, 0, 0);
////                temp2 = _val(this_pyr, 3);
//_mem(temp);
//_say("-------");
//_mem(temp2);
//_say("-------");
//                ACC = _val(this_pyr, array_cmp_num(temp, temp2));

//                temp = io_slurp8(this_pyr, "presidents.bbl");
//                temp = bstruct_load(this_pyr, temp, size(temp));
//
////                ACC = bstruct_cp(this_pyr, temp);
//                ACC = list_to_ptr_array(this_pyr, trie_entries(this_pyr, temp));
//                array_sort(this_pyr, ACC, UNSIGNED);

//                ACC = global_irt->symbols->SEXPR_IGNORE_SYMBOL;

//                ACC = _val(this_pyr,
//                        array_ncmp(this_pyr, C2B("foobaz"), 3, C2B("bar"), 2, BYTE_ASIZE));

//                tempv = _mu(this_pyr, global_irt->env);
//                _prn("_mu: ");
//                _dd(tempv);
//
//                tempv = _nar(this_pyr, global_irt->env);
//                _prn("_nar: ");
//                _dd(tempv);
//
//                tempv = _nin(this_pyr, global_irt->env);
//                _prn("_nin: ");
//                _dd(tempv);
//
//                tempv = _nlf(this_pyr, global_irt->env);
//                _prn("_nlf: ");
//                _dd(tempv);
//
//                tempv = _ntag(this_pyr, global_irt->env);
//                _prn("_ntag: ");
//                _dd(tempv);
//
//                tempv = _nva(this_pyr, global_irt->env);
//                _prn("_nva: ");
//                _dd(tempv);
//
//                tempv = _nptr(this_pyr, global_irt->env);
//                _prn("_nptr: ");
//                _dd(tempv);

//                ACC = bstruct_to_array(this_pyr, global_irt->env);

//                ACC = global_irt->tags->PYR_TAG_CPTR;
//                temp = mem_new_tptr(this_pyr, global_irt->tags->PYR_TAG_CPTR, nil);
//                ACC = _val(this_pyr, is_cptr(temp));

//                ACC = _mk_aop(this_pyr, 2,
//                        mem_new_tptr(this_pyr, global_irt->tags->PYR_TAG_CPTR, _val(this_pyr, 0xdeadbeef)),
//                        _val(this_pyr, 0xdeadbabe),
//                        mem_new_tptr(this_pyr, global_irt->tags->PYR_TAG_OPERAND, nil),
//                        _val(this_pyr, 0xbeefface),
//                        _val(this_pyr, 0xcafefade),
//                        _val(this_pyr, 0xabaddeed));

//                ACC = global_irt->tags_strings;

//                ACC = _val(this_pyr,
//                        array_search(this_pyr, global_irt->tags_strings, global_irt->tags->PYR_TAG_CPTR, LEX_MWORD));

//                tempv = array_search(this_pyr, global_irt->tags_strings, global_irt->tags->PYR_TAG_CPTR, LEX_MWORD);
//                ACC = pcar( rdp(global_irt->tags_strings, tempv) );
//
//                _mem(ACC);
//                _say("------------------------------------");
//                _mem(global_irt->tags->PYR_TAG_CPTR);

//                ACC = xbar_tag_to_string(this_pyr, global_irt->tags->PYR_TAG_CPTR);

//                ACC = global_irt->env;

//                ACC = this_pyr->self;

//                num_tags = size(global_irt->tags);
//
//                for(i=0; i<num_tags; i++){
////                    tempv = array_search_rewrite(this_pyr, global_irt->tags_strings, rdp(global_irt->tags,i), LEX_MWORD);
//                    tempv = array_search(this_pyr, global_irt->tags_strings, rdp(global_irt->tags,i), LEX_MWORD);
////                    _mem(rdp(global_irt->tags,i));
////                    _say("---------------------");
//                    if(tempv!=-1){
////                        _mem(pcar(rdp(global_irt->tags_strings,tempv)));
//                        found_count++;
//                    }
////                    _say("/////////////////////");
//                }
//
//                _dd(num_tags);
//                _dd(found_count);

//                fprintf(stderr, "%d\n", sizeof(unsigned));
//                fprintf(stderr, "%d\n", sizeof(double));
//
//                double foo = 12345.6789;
//                fprintf(stderr, "%lf\n", foo);

//                ACC = global_irt->xbar;

//                ACC = io_slurp8(this_pyr, "code_block.bbl");
//                ACC = bstruct_load(this_pyr, ACC, size(ACC));
//                _say("code_block.bbl loaded");
//
//                pvc_core_interp(this_pyr, tcar(ACC));
//                _say("done");

//                ACC = io_slurp8(this_pyr, "paged_array.bbl");
//                ACC = bstruct_load(this_pyr, ACC, size(ACC));
//                _say("paged_array.bbl loaded");

//                ACC = io_slurp8(this_pyr, "root.bbl");
//                ACC = bstruct_load(this_pyr, ACC, size(ACC));
//                _say("root.bbl loaded");
                ACC = io_slurp8(this_pyr, "tree.bbl");
                ACC = bstruct_load(this_pyr, ACC, size(ACC));
                _say("tree.bbl loaded");

#define sfield_pa(base)  (vcar(rdp(base,0)))
#define pgsize_pa(base)  (vcar(rdp(base,1)))
#define arrays_pa(base)       (rdp(base,2))
#define rdv_pa(base,offset) (rdv(rdp(arrays_pa(base),(offset/pgsize_pa(base))),(offset%pgsize_pa(base))))
#define ldv_pa(base,offset) (ldv(rdp(arrays_pa(base),(offset/pgsize_pa(base))),(offset%pgsize_pa(base))))
#define rdp_pa(base,offset) (rdp(rdp(arrays_pa(base),(offset/pgsize_pa(base))),(offset%pgsize_pa(base))))
#define ldp_pa(base,offset) (ldp(rdp(arrays_pa(base),(offset/pgsize_pa(base))),(offset%pgsize_pa(base))))

// std_new_pa() <-- creates a new paged_array

//_dd(pgsize_pa(ACC));
//_dd(sfield_pa(ACC));



//                ACC = arrays_pa(ACC);

//                tempv = rdv_pa(ACC,9);
//                ACC = _val(this_pyr, tempv);


// Clayton Bauman 2017

